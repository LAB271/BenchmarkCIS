[
  {
    "instruction": "\n---\nCan you explain the custom sorting algorithm used in the code and why it was chosen over built-in options?\n\n",
    "reference_contexts": "Source: CountYourWords/readme.md\n```\n# Project Description\nI am creating a text parser in Java named CountYourWords.\n\n# Constraints\n- Numbers in the document are ignored and are not processed\n- Other characters than words should be filtered out of the input, so ## or @ or !! are ignored\n- You do not have to take in account strange combinations like: love4u or mail@address.nl,\ncombinations like these are out of scope for this assignment\n- Next to showing the total number of words in the document, the number of occurrences of\neach word is also calculated\n- The total number of occurrences next to the word must be shown on screen one by one (in\nlowercase)\n- Counting the occurrences per word is case insensitive (so Matchbox, matchbox, and\nMATCHBOX are all the same word)\n- When printing the occurrences, the words must be in alphabetical order\n- You cannot use a built-in .NET sort routine, so produce on of your own, it does not have to be\nthe fastest sort-routine as long as it is reliable end reusable.\n- The document is a text file that will be read by your console app and has the fixed name:\ninput.txt\n\n# Goal\n- The code must be production code, use everything you would use in production. You are allowed to use third party components if required (except for the sorting)\n- All classes can be in one .NET core console application (assembly), as long as you show clear separation\n- Everything must be done using testing and TDD\n- Use SOLID and object-oriented programming\n```\n"
  },
  {
    "instruction": "\n---\nHow does the word count logic handle punctuation, numbers, and case sensitivity?\n\n",
    "reference_contexts": "Source: CountYourWords/readme.md\n```\n# Project Description\nI am creating a text parser in Java named CountYourWords.\n\n# Constraints\n- Numbers in the document are ignored and are not processed\n- Other characters than words should be filtered out of the input, so ## or @ or !! are ignored\n- You do not have to take in account strange combinations like: love4u or mail@address.nl,\ncombinations like these are out of scope for this assignment\n- Next to showing the total number of words in the document, the number of occurrences of\neach word is also calculated\n- The total number of occurrences next to the word must be shown on screen one by one (in\nlowercase)\n- Counting the occurrences per word is case insensitive (so Matchbox, matchbox, and\nMATCHBOX are all the same word)\n- When printing the occurrences, the words must be in alphabetical order\n- You cannot use a built-in .NET sort routine, so produce on of your own, it does not have to be\nthe fastest sort-routine as long as it is reliable end reusable.\n- The document is a text file that will be read by your console app and has the fixed name:\ninput.txt\n\n# Goal\n- The code must be production code, use everything you would use in production. You are allowed to use third party components if required (except for the sorting)\n- All classes can be in one .NET core console application (assembly), as long as you show clear separation\n- Everything must be done using testing and TDD\n- Use SOLID and object-oriented programming\n```\n"
  },
  {
    "instruction": "\n---\nWhat is the mechanism for reading files, and how does it ensure that only input.txt is processed?\n\n",
    "reference_contexts": "Source: CountYourWords/readme.md\n```\n# Project Description\nI am creating a text parser in Java named CountYourWords.\n\n# Constraints\n- Numbers in the document are ignored and are not processed\n- Other characters than words should be filtered out of the input, so ## or @ or !! are ignored\n- You do not have to take in account strange combinations like: love4u or mail@address.nl,\ncombinations like these are out of scope for this assignment\n- Next to showing the total number of words in the document, the number of occurrences of\neach word is also calculated\n- The total number of occurrences next to the word must be shown on screen one by one (in\nlowercase)\n- Counting the occurrences per word is case insensitive (so Matchbox, matchbox, and\nMATCHBOX are all the same word)\n- When printing the occurrences, the words must be in alphabetical order\n- You cannot use a built-in .NET sort routine, so produce on of your own, it does not have to be\nthe fastest sort-routine as long as it is reliable end reusable.\n- The document is a text file that will be read by your console app and has the fixed name:\ninput.txt\n\n# Goal\n- The code must be production code, use everything you would use in production. You are allowed to use third party components if required (except for the sorting)\n- All classes can be in one .NET core console application (assembly), as long as you show clear separation\n- Everything must be done using testing and TDD\n- Use SOLID and object-oriented programming\n```\n"
  },
  {
    "instruction": "\n---\nCan you provide examples of how the code adheres to SOLID principles, particularly in terms of separation of concerns?\n\n",
    "reference_contexts": "Source: CountYourWords/readme.md\n```\n# Project Description\nI am creating a text parser in Java named CountYourWords.\n\n# Constraints\n- Numbers in the document are ignored and are not processed\n- Other characters than words should be filtered out of the input, so ## or @ or !! are ignored\n- You do not have to take in account strange combinations like: love4u or mail@address.nl,\ncombinations like these are out of scope for this assignment\n- Next to showing the total number of words in the document, the number of occurrences of\neach word is also calculated\n- The total number of occurrences next to the word must be shown on screen one by one (in\nlowercase)\n- Counting the occurrences per word is case insensitive (so Matchbox, matchbox, and\nMATCHBOX are all the same word)\n- When printing the occurrences, the words must be in alphabetical order\n- You cannot use a built-in .NET sort routine, so produce on of your own, it does not have to be\nthe fastest sort-routine as long as it is reliable end reusable.\n- The document is a text file that will be read by your console app and has the fixed name:\ninput.txt\n\n# Goal\n- The code must be production code, use everything you would use in production. You are allowed to use third party components if required (except for the sorting)\n- All classes can be in one .NET core console application (assembly), as long as you show clear separation\n- Everything must be done using testing and TDD\n- Use SOLID and object-oriented programming\n```\n"
  }
]